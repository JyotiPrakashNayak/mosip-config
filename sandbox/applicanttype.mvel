import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.Period;
import java.util.List;
import java.time.ZoneId;
import java.time.temporal.ValueRange;

String CHILD = "INFANT";
String MINOR = "MINOR";
String ADULT = "ADULT";
String MALE = 'MLE';
String FEMALE = 'FLE';
String NonResident = "FR";
String Resident = "NFR";
String Others = "OTH";
String DATE_PATTERN = "yyyy/MM/dd";

def isUpdateFlow(identity) {
  Object val = identity.get('_flow');
  if(val != null) {
    return ((String)val).equals('Update') ? true : false;
  }

  val = identity.getOrDefault('isUpdate', false);
  return val == null ? false : (Boolean) val;  
}

def getResidenceStatus(identity) {
    if(identity.containsKey('residenceStatusCode')) {
        return identity.getOrDefault('residenceStatusCode', null);
    }

    if(identity.containsKey('residenceStatus')) {
        Object val = identity.getOrDefault('residenceStatus', null);
        return val == null ? null :
            (val instanceof String ? ; (String)val : (String) ((List)val).get(0).value);
    }

    return null;
}

def getGenderType(identity) {
    if(identity.containsKey('genderCode')) {
        return identity.getOrDefault('genderCode', null);
    }

    if(identity.containsKey('gender')) {
        Object val = identity.getOrDefault('gender', null);
        return val == null ? null :
            (val instanceof String ? ; (String)val : (String) ((List)val).get(0).value);
    }

    return null;
}

def getAgeCode(identity) {
    if(ageGroups == null || !identity.containsKey('dateOfBirth'))
        return null;

    String dob = identity.get('dateOfBirth');
    LocalDate date = LocalDate.parse(dob, DateTimeFormatter.ofPattern(DATE_PATTERN));
    LocalDate currentDate = LocalDate.now(ZoneId.of("UTC"));
     int  ageInYears = -1;
     if (!date.isAfter(currentDate)) {
         ageInYears = Period.between(date, currentDate).getYears();
    } else {
            return "KER-MSD-151";
     }
    String ageGroup = null;
    for(String groupName : ageGroups.keySet()) {
        String[] range = ((String)ageGroups.get(groupName)).split('-');
        if(ValueRange.of(Long.valueOf(range[0]), Long.valueOf(range[1])).isValidIntValue(ageInYears)) {
            ageGroup = groupName;
        }
    }

   return ageGroup;
}


def getBioExceptionFlag(identity) {
    return identity.containsKey('isBioException') ? (Boolean) identity.get('isBioException') : false;
}

def getApplicantType() {
  String itc = getResidenceStatus(identity);
  String genderType = getGenderType(identity);
  String ageCode = getAgeCode(identity);
  boolean isBioExPresent = getBioExceptionFlag(identity);

  if(itc == null || genderType == null || ageCode == null)
    return isUpdateFlow(identity) ? "000" : "KER-MSD-147";

  if (itc == NonResident && genderType == MALE && (ageCode == CHILD || ageCode == MINOR) && !isBioExPresent) {
    return "001";
  } else if (itc == NonResident && genderType == MALE && ageCode == ADULT && !isBioExPresent) {
    return "002";
  } else if (itc == Resident && genderType == MALE && (ageCode == CHILD || ageCode == MINOR) && !isBioExPresent) {
    return "003";
  } else if (itc == Resident && genderType == MALE && ageCode == ADULT && !isBioExPresent) {
    return "004";
  } else if (itc == NonResident && genderType == FEMALE && (ageCode == CHILD || ageCode == MINOR) && !isBioExPresent) {
    return "005";
  } else if (itc == NonResident && genderType == FEMALE && ageCode == ADULT && !isBioExPresent) {
    return "006";
  } else if (itc == Resident && genderType == FEMALE && (ageCode == CHILD || ageCode == MINOR) && !isBioExPresent) {
    return "007";
  } else if (itc == Resident && genderType == FEMALE && ageCode == ADULT && !isBioExPresent) {
    return "008";
  } else if (itc == NonResident && genderType == Others && (ageCode == CHILD || ageCode == MINOR) && !isBioExPresent) {
    return "005";
  } else if (itc == NonResident && genderType == Others && ageCode == ADULT && !isBioExPresent) {
    return "006";
  } else if (itc == Resident && genderType == Others && (ageCode == CHILD || ageCode == MINOR) && !isBioExPresent) {
    return "007";
  } else if (itc == Resident && genderType == Others && ageCode == ADULT && !isBioExPresent) {
    return "008";
  } else if (itc == NonResident && genderType == MALE && (ageCode == CHILD || ageCode == MINOR) && isBioExPresent) {
    return "009";
  } else if (itc == NonResident && genderType == MALE && ageCode == ADULT && isBioExPresent) {
    return "010";
  } else if (itc == Resident && genderType == MALE && (ageCode == CHILD || ageCode == MINOR) && isBioExPresent) {
    return "011";
  } else if (itc == Resident && genderType == MALE && ageCode == ADULT && isBioExPresent) {
    return "012";
  } else if (itc == NonResident && genderType == FEMALE && (ageCode == CHILD || ageCode == MINOR) && isBioExPresent) {
    return "013";
  } else if (itc == NonResident && genderType == FEMALE && ageCode == ADULT && isBioExPresent) {
    return "014";
  } else if (itc == Resident && genderType == FEMALE && (ageCode == CHILD || ageCode == MINOR) && isBioExPresent) {
    return "015";
  } else if (itc == Resident && genderType == FEMALE && ageCode == ADULT && isBioExPresent) {
    return "016";
  } else if (itc == NonResident && genderType == Others && (ageCode == CHILD || ageCode == MINOR) && isBioExPresent) {
    return "013";
  } else if (itc == NonResident && genderType == Others && ageCode == ADULT && isBioExPresent) {
    return "014";
  } else if (itc == Resident && genderType == Others && (ageCode == CHILD || ageCode == MINOR) && isBioExPresent) {
    return "015";
  } else if (itc == Resident && genderType == Others && ageCode == ADULT && isBioExPresent) {
    return "016";
  } else if (itc == Resident && provinceType == Kenitra && ageCode == ADULT && !isBioExPresent) {
    return "017";  
  }
  return "000";
}
